import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Box, Button, Tab, Tabs, Typography, InputBase, Paper, Grid, Divider } from '@mui/material';
import api from '../services/api';
import ProductCard from '../components/ProductCard';
import OrderSummary from '../components/OrderSummary';

const OrderSessionPage = () => {
    const { sessionId } = useParams();
    const navigate = useNavigate();
    const [categories, setCategories] = useState([]);
    const [products, setProducts] = useState([]);
    const [cart, setCart] = useState([]);
    const [selectedCategory, setSelectedCategory] = useState('');
    const [searchTerm, setSearchTerm] = useState('');

    useEffect(() => {
        fetchCategories();
    }, []);

    useEffect(() => {
        if (selectedCategory) {
            fetchProductsByCategory(selectedCategory);
        } else {
            fetchProducts();
        }
    }, [selectedCategory]);

    const fetchCategories = async () => {
        try {
            const response = await api.get('/categories', {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
            });
            setCategories(response.data.categories);
        } catch (error) {
            console.error('Failed to fetch categories', error);
        }
    };

    const fetchProducts = async () => {
        try {
            const response = await api.get('/products', {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
            });
            setProducts(response.data.products);
        } catch (error) {
            console.error('Failed to fetch products', error);
        }
    };

    const fetchProductsByCategory = async (categoryId) => {
        try {
            const response = await api.get(`/products/category/${categoryId}`, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
            });
            setProducts(response.data.products);
        } catch (error) {
            console.error('Failed to fetch products by category', error);
        }
    };

    const handleCategoryChange = (event, newCategory) => {
        setSelectedCategory(newCategory);
    };

    const handleSearchChange = (event) => {
        setSearchTerm(event.target.value);
    };

    const filteredProducts = products.filter(product =>
        product.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const addToCart = (product) => {
        const existingItem = cart.find(item => item.id === product.id);
        if (existingItem) {
            setCart(cart.map(item =>
                item.id === product.id ? { ...item, quantity: item.quantity + 1, unit_price: product.unit_price } : item
            ));
        } else {
            setCart([...cart, { ...product, quantity: 1, unit_price: product.unit_price }]);
        }
    };

    const removeFromCart = (product) => {
        const existingItem = cart.find(item => item.id === product.id);
        if (existingItem.quantity === 1) {
            setCart(cart.filter(item => item.id !== product.id));
        } else {
            setCart(cart.map(item =>
                item.id === product.id ? { ...item, quantity: item.quantity - 1 } : item
            ));
        }
    };

    const updateCartWithPricelist = (pricelist) => {
        const updatedCart = cart.map(item => {
            const pricelistItem = pricelist.items.find(p => p.product_id === item.id);
            if (pricelistItem) {
                return { ...item, unit_price: pricelistItem.new_price };
            }
            return item;
        });
        setCart(updatedCart);
    };

    const applyDiscountOrCoupon = async (code) => {
        try {
            const response = await api.post('/apply-code', { code }, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
            });

            if (response.data.type === 'pricelist') {
                updateCartWithPricelist(response.data.pricelist);
            } else if (response.data.type === 'coupon') {
                // Apply coupon logic
            } else if (response.data.type === 'buyXgetY') {
                // Apply BuyXGetY logic
            }
        } catch (error) {
            console.error('Failed to apply code', error);
        }
    };

    const handleExitSession = () => {
        navigate('/sessions');
    };

    return (
        <Box display="flex" flexDirection="column">
            <Box display="flex" justifyContent="space-between" p={2}>
                <Typography variant="h4">Order Session</Typography>
                <Button variant="contained" color="secondary" onClick={handleExitSession}>
                    Exit Session
                </Button>
            </Box>
            <Divider />
            <Box display="flex" p={2}>
                <Box width="70%">
                    <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
                        <Tabs
                            value={selectedCategory}
                            onChange={handleCategoryChange}
                            aria-label="categories"
                            variant="scrollable"
                            scrollButtons="auto"
                        >
                            <Tab label="All Products" value="" />
                            {categories.map((category) => (
                                <Tab label={category.name} value={category.id} key={category.id} />
                            ))}
                        </Tabs>
                        <Box display="flex" alignItems="center" mt={2} mb={2}>
                            <InputBase
                                placeholder="Search products"
                                value={searchTerm}
                                onChange={handleSearchChange}
                                fullWidth
                            />
                        </Box>
                    </Paper>
                    <Grid container spacing={2}>
                        {filteredProducts.map((product) => (
                            <Grid item xs={12} sm={6} md={4} key={product.id}>
                                <ProductCard product={product} onAddToCart={addToCart} />
                            </Grid>
                        ))}
                    </Grid>
                </Box>
                <Box width="30%" pl={2}>
                    <OrderSummary
                        cart={cart}
                        onRemoveFromCart={removeFromCart}
                        updateCartWithPricelist={updateCartWithPricelist}
                        applyDiscount={(code) => applyDiscountOrCoupon(code)}
                        applyCoupon={(code) => applyDiscountOrCoupon(code)}
                        applyBuyXGetY={(code) => applyDiscountOrCoupon(code)}
                    />
                </Box>
            </Box>
        </Box>
    );
};

export default OrderSessionPage;
